library(ISLR)
library(splines)
library(gam)
library(tree)
library(randomForest)
library(corrplot)
library(GGally)
library(quantmod)
library(fBasics)
library(xts)
library(MASS)
library(class)
library(caret)
library(e1071)
library(vars)
library(marima)
knnNDX1 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$NDX.trend01, k = 1)
knnNDX1
confusionMatrix(knnNDX1, as.factor(test$NDX.trend01))
# KNN using k=100
print("KNN100")
knnNDX100 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$NDX.trend01, k = 100)
knnNDX100
confusionMatrix(knnNDX100, as.factor(test$NDX.trend01))
# KNN using k=5
print("KNN5")
knnNDX5 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$NDX.trend01, k = 1)
knnNDX5
confusionMatrix(knnNDX5, as.factor(test$NDX.trend01))
# Predicting SPX
print("SPX")
# LDA
print("LDA")
ldaSPX <- lda(SPX.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
ldaSPX
ldapredictionSPX <- predict(ldaSPX, newdata = test, type = "response")
confusionMatrix(ldapredictionSPX$class, as.factor(test$SPX.trend01))
ldaSPX
#QDA
print("QDA")
qdaSPX <- qda(SPX.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
qdaSPX
qdapredictionSPX <- predict(qdaSPX, newdata = test, type = "response")
confusionMatrix(ldapredictionSPX$class, as.factor(test$SPX.trend01))
# KNN using k=1
print("KNN1")
knnSPX1 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$SPX.trend01, k = 1)
knnSPX1
confusionMatrix(knnSPX1, as.factor(test$SPX.trend01))
# KNN using k=100
print("KNN100")
knnSPX100 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$SPX.trend01, k = 100)
knnSPX100
confusionMatrix(knnSPX100, as.factor(test$SPX.trend01))
# KNN using k=5
print("KNN5")
knnSPX5 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$SPX.trend01, k = 100)
knnSPX5
confusionMatrix(knnSPX5, as.factor(test$SPX.trend01))
# Predicting DJIA
print("DJIA")
# LDA
print("LDA")
ldaDJIA <- lda(DJIA.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
ldaDJIA
ldapredictionDJIA <- predict(ldaDJIA, newdata = test, type = "response")
confusionMatrix(ldapredictionDJIA$class, as.factor(test$DJIA.trend01))
# QDA
print("QDA")
qdaDJIA <- qda(DJIA.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
qdaDJIA
qdapredictionDJIA <- predict(qdaDJIA, newdata = test, type = "response")
confusionMatrix(qdapredictionDJIA$class, as.factor(test$DJIA.trend01))
# KNN using k=1
print("KNN1")
knnDJIA1 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$DJIA.trend01, k = 1)
knnDJIA1
confusionMatrix(knnDJIA1, as.factor(test$DJIA.trend01))
# KNN using k=100
print("KNN100")
knnDJIA100 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$DJIA.trend01, k = 100)
knnDJIA100
confusionMatrix(knnDJIA100, as.factor(test$DJIA.trend01))
# KNN using k=5
print("KNN5")
knnDJIA5 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$DJIA.trend01, k = 100)
knnDJIA5
confusionMatrix(knnDJIA5, as.factor(test$DJIA.trend01))
# Predicting BTC
print("BTC")
# LDA
print("LDA")
ldaBTC <- lda(DJIA.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
ldaBTC
ldapredictionBTC <- predict(ldaBTC, newdata = test, type = "response")
confusionMatrix(ldapredictionBTC$class, as.factor(test$BTC.trend01))
# QDA
print("QDA")
qdaBTC <- qda(BTC.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
# LDA
print("LDA")
ldaBTC <- lda(DJIA.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
ldaBTC
ldapredictionBTC <- predict(ldaBTC, newdata = test, type = "response")
confusionMatrix(ldapredictionBTC$class, as.factor(test$BTC.trend01))
test$BTC.trend01
test
summary(covid.full.ds)
test
as.factor(test$SPX.trend01)
confusionMatrix(knnSPX1, as.factor(test$SPX.trend01))
# KNN using k=100
print("KNN100")
knnSPX100 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$SPX.trend01, k = 100)
knnSPX100
confusionMatrix(knnSPX100, as.factor(test$SPX.trend01))
# KNN using k=5
print("KNN5")
knnSPX5 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$SPX.trend01, k = 100)
knnSPX5
confusionMatrix(knnSPX5, as.factor(test$SPX.trend01))
ldaDJIA <- lda(DJIA.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
ldaDJIA
ldapredictionDJIA <- predict(ldaDJIA, newdata = test, type = "response")
confusionMatrix(ldapredictionDJIA$class, as.factor(test$DJIA.trend01))
qdaDJIA <- qda(DJIA.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
qdaDJIA
qdapredictionDJIA <- predict(qdaDJIA, newdata = test, type = "response")
confusionMatrix(qdapredictionDJIA$class, as.factor(test$DJIA.trend01))
# KNN using k=1
print("KNN1")
knnDJIA1 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$DJIA.trend01, k = 1)
knnDJIA1
confusionMatrix(knnDJIA1, as.factor(test$DJIA.trend01))
# KNN using k=100
print("KNN100")
knnDJIA100 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$DJIA.trend01, k = 100)
knnDJIA100
confusionMatrix(knnDJIA100, as.factor(test$DJIA.trend01))
# KNN using k=5
print("KNN5")
knnDJIA5 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$DJIA.trend01, k = 100)
knnDJIA5
confusionMatrix(knnDJIA5, as.factor(test$DJIA.trend01))
```
```{r}
# KNN using k=5
print("KNN5")
knnDJIA5 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$DJIA.trend01, k = 100)
knnDJIA5
confusionMatrix(knnDJIA5, as.factor(test$DJIA.trend01))
# LDA
print("LDA")
ldaBTC <- lda(DJIA.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
ldaBTC
ldapredictionBTC <- predict(ldaBTC, newdata = test, type = "response")
confusionMatrix(ldapredictionBTC$class, as.factor(test$BTC.trend01))
# QDA
print("QDA")
# LDA
print("LDA")
ldaBTC <- lda(DJIA.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
ldaBTC
ldapredictionBTC <- predict(ldaBTC, newdata = test, type = "response")
confusionMatrix(ldapredictionBTC$class, as.factor(test$Bitcoin.trend01))
# QDA
print("QDA")
qdaBTC <- qda(BTC.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
qdaBTC
qdaBTC <- qda(Bitcoin.trend01 ~ TSA + Gold + TLT + Oil + Unemployment + Cases + Deaths + GDP, data = train)
qdaBTC
qdapredictionBTC <- predict(qdaBTC, newdata = test, type = "response")
confusionMatrix(qdapredictionBTC$class, as.factor(test$Bitcoin.trend01))
# KNN using k=1
print("KNN1")
knnBTC1 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$Bitcoin.trend01, k = 1)
knnBTC1
confusionMatrix(knnBTC1, as.factor(test$Bitcoin.trend01))
# KNN using k=100
print("KNN100")
knnBTC100 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$Bitcoin.trend01, k = 1)
knnBTC100
confusionMatrix(knnBTC100, as.factor(test$Bitcoin.trend01))
# KNN using k=5
print("KNN5")
knnBTC5
knnBTC5 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$Bitcoin.trend01, k = 100)
knnBTC5
knnBTC5 <- knn(data.frame(train[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), data.frame(test[, c("TSA", "Gold", "TLT", "Oil", "Unemployment", "Cases", "Deaths", "GDP")]), train$Bitcoin.trend01, k = 100)
confusionMatrix(knnBTC5, as.factor(test$Bitcoin.trend01))
# KNN using k=5
print("KNN5")
# Create training and test datasets based on precovid
CovidonlyData<-subset(allData, Date >"2020-01-21")
#Split the Data into Training and Testing
Training<-subset(Dataall, Date <"2021-02-01")
#Split the Data into Training and Testing
Training<-subset(covid.full.ds, Date <"2021-02-01")
Testing<-subset(covid.full.ds, Date >"2021-01-31")
Training2<-covid.full.ds %>% sample_frac(.7)
Testing2<-covid.full.ds %>% sample_frac(.3)
#NDX Model
NDXGAM<-gam(NDX.ret ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training)
summary(NDXGAM)
coef(NDXGAM)
plot.Gam(NDXGAM)
NDXGAMprediction<-predict(NDXGAM,Testing,type="response")
NDXGAMpredictionType<- ifelse(NDXGAMprediction > 0, 1, 0)
NDXGAMactualType<-ifelse(Testing$NDX.ret > 0, 1, 0)
table(NDXGAMpredictionType, NDXGAMactualType)
#NDX model using 70/30% Split
NDXGAM2<-gam(NDX.ret ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training2)
summary(NDXGAM2)
coef(NDXGAM2)
plot.Gam(NDXGAM2,residuals = TRUE)
NDXGAMprediction2<-predict(NDXGAM2,Testing2, type="response")
NDXGAMpredictionType2<- ifelse(NDXGAMprediction2 > 0, 1, 0)
NDXGAMactualType2<-ifelse(Testing2$NDX.ret > 0, 1, 0)
table(NDXGAMpredictionType2, NDXGAMactualType2)
#DJIA Model
DJIAGAM<-gam(DJIA.ret~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training)
summary(DJIAGAM)
coef(DJIAGAM)
plot.Gam(DJIAGAM,se=TRUE)
DJIAGAMprediction<-predict(DJIAGAM,Testing, type="response")
DJIAGAMpredictionType<- ifelse(DJIAGAMprediction > 0, 1, 0)
DJIAGAMactualType<-ifelse(Testing$DJIA.ret > 0, 1, 0)
table(DJIAGAMpredictionType, DJIAGAMactualType)
#DJIA Model using 70/30% Split
DJIAGAM2<-gam(DJIA.ret~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training2)
summary(DJIAGAM2)
coef(DJIAGAM2)
plot.Gam(DJIAGAM2,residuals = TRUE)
DJIAGAMactualType2<-ifelse(Testing2$DJIA.ret > 0, 1, 0)
DJIAGAMprediction2<-predict(DJIAGAM2,Testing2,type="response")
DJIAGAMpredictionType2<- ifelse(DJIAGAMprediction2 > 0, 1, 0)
table(DJIAGAMpredictionType2, DJIAGAMactualType2)
#SPX Covid Model
SPXGAM<-gam(SPX.ret~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training)
summary(SPXGAM)
coef(SPXGAM)
plot.Gam(SPXGAM,se=TRUE)
SPXGAMprediction<-predict(SPXGAM,Testing,type="response")
SPXGAMpredictionType<- ifelse(SPXGAMprediction > 0, 1, 0)
SPXGAMactualType<-ifelse(Testing$SPX.ret > 0, 1, 0)
table(SPXGAMpredictionType, SPXGAMactualType)
#SPX Model using 70/30% Split
SPXGAM2<-gam(SPX.ret~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training2)
summary(SPXGAM2)
coef(SPXGAM2)
plot.Gam(SPXGAM2,residuals = TRUE)
SPXGAMprediction2<-predict(SPXGAM2,Testing2,type="response")
SPXGAMpredictionType2<- ifelse(SPXGAMprediction2 > 0, 1, 0)
SPXGAMactualType2<-ifelse(Testing2$SPX.ret > 0, 1, 0)
table(SPXGAMpredictionType2, SPXGAMactualType2)
#Bitcoin Model
BTCGAM<-gam(Bitcoin.ret ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training)
summary(BTCGAM)
coef(BTCGAM)
plot.Gam(BTCGAM,residuals = TRUE)
BTCGAMpredicition<-predict(BTCGAM,Testing,type="response")
BTCGAMpredictionType<- ifelse(BTCGAMpredicition > 0, 1, 0)
BTCGAMactualType<-ifelse(Testing$Bitcoin.ret > 0, 1, 0)
table(BTCGAMpredictionType, BTCGAMactualType)
#Bitcoin Model using 70/30% Split
BTCGAM2<-gam(Bitcoin.ret ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training2)
summary(BTCGAM2)
coef(BTCGAM2)
plot.Gam(BTCGAM2,residuals = TRUE)
BTCGAMpredicition2<-predict(BTCGAM2,Testing2,type="response")
BTCGAMpredictionType2<- ifelse(BTCGAMpredicition2 > 0, 1, 0)
BTCGAMactualType2<-ifelse(Testing2$Bitcoin.ret > 0, 1, 0)
table(BTCGAMpredictionType2, BTCGAMactualType2)
```
```{r}
#Split into test and train
covid.full.ds.train <- covid.full.ds %>% dplyr::filter(Date<as.Date("2021-02-01"), Date>as.Date("2019-01-02"))
covid.full.ds.test  <- anti_join(covid.full.ds  %>% dplyr::filter(Date>as.Date("2019-01-02")) , covid.full.ds.train, by = 'rnum')
#Filter required data for forecast
covid.full.ds.train.1<- covid.full.ds.train %>% dplyr::select(Date,Cases,Deaths,Oil,Gold,TSA,TLT,Unemployment,GDP,SPX.trend,NDX.trend,DJIA.trend,Bitcoin.trend)
covid.full.ds.test.1<- covid.full.ds.test %>% dplyr::select(Date,Cases,Deaths,Oil,Gold,TSA,TLT,Unemployment,GDP,SPX.trend,NDX.trend,DJIA.trend,Bitcoin.trend)
#Split into test and train based on sampling
covid.full.ds.train <- covid.full.ds %>% dplyr::filter( Date>as.Date("2019-01-02"))  %>% sample_frac(.70)
covid.full.ds.test  <- anti_join(covid.full.ds  %>% dplyr::filter(Date>as.Date("2019-01-02")) , covid.full.ds.train, by = 'rnum')
covid.full.ds.train.2<- covid.full.ds.train %>% dplyr::select(Date,Cases,Deaths,Oil,Gold,TSA,TLT,Unemployment,GDP,SPX.trend,NDX.trend,DJIA.trend,Bitcoin.trend)
covid.full.ds.test.2<- covid.full.ds.test %>% dplyr::select(Date,Cases,Deaths,Oil,Gold,TSA,TLT,Unemployment,GDP,SPX.trend,NDX.trend,DJIA.trend,Bitcoin.trend)
set.seed(3)
rf.covid.spx<-randomForest(SPX.trend~.,data=covid.full.ds.train.2 %>% dplyr::select(Cases,Deaths,Oil,Gold,TSA,TLT,Unemployment,GDP,SPX.trend),
mtry=3, tree=2000,importance=TRUE)
yhat.rf.spx<-predict(rf.covid.spx, newdata = covid.full.ds.test.2,positive="Down")
confusionMatrix(yhat.rf.spx,covid.full.ds.test.2$SPX.trend)
importance(rf.covid.spx)
varImpPlot(rf.covid.spx)
##Bitcoin
rf.covid.bitcoin<-randomForest(Bitcoin.trend~.,data=covid.full.ds.train.2 %>% dplyr::select(Cases,Deaths,Oil,Gold,TSA,TLT,Unemployment,GDP,Bitcoin.trend),
mtry=5, tree=2000,importance=TRUE)
yhat.rf.bitcoin<-predict(rf.covid.bitcoin, newdata = covid.full.ds.test.2,positive="Down")
confusionMatrix(yhat.rf.bitcoin,covid.full.ds.test.2$Bitcoin.trend)
importance(rf.covid.bitcoin)
varImpPlot(rf.covid.bitcoin)
#DJIA
rf.covid.djia<-randomForest(DJIA.trend~.,data=covid.full.ds.train.2 %>% dplyr::select(Cases,Deaths,Oil,Gold,TSA,TLT,Unemployment,GDP,DJIA.trend),
mtry=5, tree=2000,importance=TRUE)
yhat.rf.djia<-predict(rf.covid.djia, newdata = covid.full.ds.test.2,positive="Down")
confusionMatrix(yhat.rf.djia,covid.full.ds.test.2$DJIA.trend)
importance(rf.covid.djia)
varImpPlot(rf.covid.djia)
#NDX
rf.covid.ndx<-randomForest(NDX.trend~.,data=covid.full.ds.train.2 %>% dplyr::select(Cases,Deaths,Oil,Gold,TSA,TLT,Unemployment,GDP,NDX.trend),
mtry=5, tree=5000,importance=TRUE)
yhat.rf.ndx<-predict(rf.covid.ndx, newdata = covid.full.ds.test.2)
confusionMatrix(yhat.rf.ndx,covid.full.ds.test.2$NDX.trend,positive="Down")
importance(rf.covid.ndx)
varImpPlot(rf.covid.ndx)
#SPX
set.seed(3)
xgboost.covid.spx<-xgboost(data = covid.full.ds.train.2 %>% dplyr::select(Cases,Deaths,Oil,Gold,TSA,TLT,Unemployment,GDP) %>% as.matrix,
label = if_else(covid.full.ds.train.2$SPX.trend=="Up",1,0),
max_depth = 10,
eta = 0.2,
nrounds = 100,
objective = "binary:logistic",
booster="gbtree",
min_child_weight=1,
gamma = 0.5,
sampling_method= "uniform",
subsample=1,
tree_method="exact",
grow_policy="lossguide",
num_parallel_tree=2,
nthread=2,
max_delta_step=2,
predictor="cpu_predictor")
table(BTCGAMpredictionType2, BTCGAMactualType2)
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir = "D:/Dan/Stevens/Financial Data Science/Project")
library(tidyverse)
library(readxl)
options(scipen=999)
library('gdata')
library('ggplot2')
library('plyr')
library('doBy')
library('readxl')
library('pastecs')
library(ggpubr)
library(ISLR)
library(splines)
library(gam)
library(tree)
library(randomForest)
library(corrplot)
library(GGally)
library(quantmod)
library(fBasics)
library(xts)
library(MASS)
library(class)
library(caret)
library(e1071)
library(vars)
library(marima)
#Time Series for TSA and COVID
ggplot(data=covid.full.ds, aes(x=Date, y=TSA)) +
geom_line()
#Time Series for TSA and COVID
ggplot(data=covid.full.ds, aes(x=Date, y=TSA)) +
geom_line()
ggplot(data=covid.full.ds, aes(x=Cases, y=Deaths)) +
geom_line()
ggplot(data=covid.full.ds, aes(x=Cases, y=Rate)) +
geom_line()
ggplot(data=covid.full.ds, aes(x=Cases, y=TSA)) +
geom_line()
ggplot(data=covid.full.ds, aes(x=Date, y=Deaths, na.rm=TRUE)) +
geom_line()
# Visualize and explore the datasets
ggplot(covid.full.ds, aes(x = Date, y = Deaths, na.rm = TRUE)) +
geom_line()
ggplot(covid.full.ds, aes(x = Date, y = NDX)) +
geom_line()
ggplot(covid.full.ds, aes(x = Date, y = Gold)) +
geom_line()
ggplot(covid.full.ds, aes(x = Date, y = Oil)) +
geom_line()
ggplot(covid.full.ds, aes(x = Cases, y = NDX)) +
geom_line()
ggplot(covid.full.ds, aes(x = Cases, y = Gold)) +
geom_line()
ggplot(covid.full.ds, aes(x = Cases, y = Oil)) +
geom_line()
ggplot(covid.full.ds, aes(x = Deaths, y = NDX)) +
geom_line()
ggplot(covid.full.ds, aes(x = Deaths, y = Gold)) +
geom_line()
ggplot(covid.full.ds, aes(x = Deaths, y = Oil)) +
geom_line()
ggplot(covid.full.ds, aes(x = Cases, y = Deaths)) +
geom_line()
# SPX Plot
plot1<-ggplot(covid.full.ds, aes(x = Date, y = Cases)) +
geom_line()
plot2<-ggplot(covid.full.ds, aes(x = Date, y = Deaths)) +
geom_line()
plot3<-ggplot(covid.full.ds, aes(x = Date, y = SPX)) +
geom_line()
plot4<-ggplot(covid.full.ds, aes(x = Date, y = Bitcoin)) +
geom_line()
plot5<-ggplot(covid.full.ds, aes(x = Date, y = DJIA)) +
geom_line()
plot6 <- covid.full.ds %>% filter(GDP>0) %>% ggplot(aes(x = Date, y = GDP)) +
geom_line()
plot7 <- covid.full.ds %>% filter(Unemployment>0) %>% ggplot(aes(x = Date, y = Unemployment)) +
geom_line()
ggarrange(plot1,plot2,plot3,plot4,plot5,plot6,plot7,nrow = 4, ncol=2)
plot6 <- covid.full.ds %>% filter(GDP>0) %>% ggplot(aes(x = Date, y = GDP)) +
geom_line()
covid.full.ds$ %>% filter(GDP>0)
covid.full.ds %>% filter(GDP>0)
covid.full.ds$GDP
plot6 <- covid.full.ds %>% dplyr::filter(GDP>0) %>% ggplot(aes(x = Date, y = GDP)) +
geom_line()
plot6 <- covid.full.ds %>% dplyr::filter(GDP>0) %>% ggplot(aes(x = Date, y = GDP)) +
geom_line()
plot7 <- covid.full.ds %>% dplyr::filter(Unemployment>0) %>% ggplot(aes(x = Date, y = Unemployment)) +
geom_line()
ggarrange(plot1,plot2,plot3,plot4,plot5,plot6,plot7,nrow = 4, ncol=2)
plot8<-ggplot(covid.full.ds, aes(x = Cases, y = SPX, na.rm = TRUE)) +
geom_line()
plot9<-ggplot(covid.full.ds, aes(x = Cases, y = Bitcoin, na.rm = TRUE)) +
geom_line()
plot10<-ggplot(covid.full.ds, aes(x = Cases, y = DJIA, na.rm = TRUE)) +
geom_line()
plot11<- covid.full.ds %>% dplyr::filter(GDP>0) %>% ggplot( aes(x = Cases, y = GDP, na.rm = TRUE)) +
geom_line()
plot12<- covid.full.ds %>% dplyr::filter(GDP>0) %>% ggplot( aes(x = Cases, y = Unemployment, na.rm = TRUE)) +
geom_line()
ggarrange(plot8,plot9,plot10,plot11,plot12,nrow = 3, ncol=2)
plot13<-ggplot(covid.full.ds, aes(x = Deaths, y = SPX, na.rm = TRUE)) +
geom_line()
plot14<-ggplot(covid.full.ds, aes(x = Deaths, y = Bitcoin, na.rm = TRUE)) +
geom_line()
plot15<-ggplot(covid.full.ds, aes(x = Deaths, y = DJIA, na.rm = TRUE)) +
geom_line()
plot16<- covid.full.ds %>% dplyr::filter(GDP>0) %>% ggplot( aes(x = Deaths, y = GDP, na.rm = TRUE)) +
geom_line()
plot17<- covid.full.ds %>% dplyr::filter(GDP>0) %>% ggplot( aes(x = Deaths, y = Unemployment, na.rm = TRUE)) +
geom_line()
ggarrange(plot13,plot14,plot15,plot16,plot17,nrow = 3, ncol=2)
#NDX Model
NDXGAM<-gam(NDX.trend01 ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family="binomial")
summary(NDXGAM)
NDXGAMprediction<-predict(NDXGAM,Testing,type="response")
NDXGAMprediction
predict(NDXGAM,Testing,type="response")
Testing
Testing<-subset(covid.full.ds, Date >"2021-01-31")
#Split the Data into Training and Testing
Training<-subset(covid.full.ds, Date <"2021-02-01")
Testing<-subset(covid.full.ds, Date >"2021-01-31")
Training2<-covid.full.ds %>% sample_frac(.7)
#NDX Model
NDXGAM<-gam(NDX.trend01 ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family="binomial")
summary(NDXGAM)
coef(NDXGAM)
plot.Gam(NDXGAM)
NDXGAMprediction<-predict(NDXGAM,Testing,type="response")
NDXGAMprediction
#NDX Model
NDXGAM<-gam(NDX.trend ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family="binomial")
summary(NDXGAM)
coef(NDXGAM)
plot.Gam(NDXGAM)
NDXGAMprediction<-predict(NDXGAM,Testing,type="response")
NDXGAMprediction
NDXGAMpredictionType<- ifelse(NDXGAMprediction > 0, 1, 0)
NDXGAMpredictionType
Testing
Training
head(Testing)
head(NDXGAM)
NDXGAMpredictionType
NDXGAMactualType
#NDX Model
NDXGAM<-gam(NDX.trend ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family="binomial")
summary(NDXGAM)
#NDX Model
NDXGAM<-gam(NDX.trend ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family=binomial())
summary(NDXGAM)
#NDX Model
NDXGAM<-gam(NDX.trend01 ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family=binomial())
summary(NDXGAM)
#NDX Model
NDXGAM<-gam(NDX.trend01 ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family=binomial)
summary(NDXGAM)
Training
head(Training$NDX.trend01)
head(Training$NDX.trend)
head(Training)
#NDX Model
NDXGAM<-gam(NDX.trend01 ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family=binomial)
summary(NDXGAM)
gam(NDX.trend01 ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family=binomial)
#NDX Model
NDXGAM<-gam(NDX.trend01 ~ s(TLT)+s(Gold)+s(Oil)+s(TSA)+s(Cases)+s(Rate)+s(Deaths)+s(GDP)+s(Unemployment), data = Training, family=binomial)
summary(NDXGAM)
coef(NDXGAM)
plot.Gam(NDXGAM)
NDXGAMprediction<-predict(NDXGAM,Testing,type="response")
NDXGAMpredictionType<- ifelse(NDXGAMprediction > 0, 1, 0)
NDXGAMactualType<-ifelse(Testing$NDX.ret > 0, 1, 0)
table(NDXGAMpredictionType, NDXGAMactualType)
